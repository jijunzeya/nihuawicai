{"version":3,"sources":["../../src/handler/ChatHandler.js"],"names":["ChatHandler","nsp","rooms","socket","cCallback","jCallback","_namespace","_rooms","_socket","createRoomCallback","joinedRoomCallback","initSocket","console","log","handshake","query","name","_user","id","on","receiveMessage","bind","onUserChatMessage","onCreateRoom","onJoinRoom","GET_ROOMS","onGetRooms","onGetPointData","onGameEvent","data","fn","JSON","stringify","roomId","join","room","nickName","game","event","sendMessageToRoom","err","emit","code","curRoom","result","users","length","leave","to","nick","message","point","handleData","action","handleGameEvent","socketId","broadcast"],"mappings":"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","file":"ChatHandler.js","sourcesContent":["import User from '../beans/User';\nimport Room from '../beans/Room';\nimport Constants from '../common/Constants';\nimport Game from '../game/Game';\nexport default class ChatHandler {\n\n    _socket;\n\n    _user;\n\n    _namespace;\n\n    createRoomCallback;\n\n    joinedRoomCallback;\n\n    _rooms;\n\n    constructor(nsp, rooms, socket, cCallback, jCallback) {\n        this._namespace = nsp;\n        this._rooms = rooms;\n        this._socket = socket;\n        this.createRoomCallback = cCallback;\n        this.joinedRoomCallback = jCallback;\n\n        this.initSocket(this._socket);\n    }\n\n    initSocket (socket) {\n        console.log('@@##initSocket @@:' + this._socket.handshake.query.name)\n        this._user = new User(socket.id, socket.handshake.query.name);\n        this._socket.on('message', this.receiveMessage.bind(this));\n        // socket.on('disconnect', this.onDisConnect.bind(this));\n        socket.on('userChat', this.onUserChatMessage.bind(this));\n        socket.on('createRoom', this.onCreateRoom.bind(this));\n        socket.on('joinRoom', this.onJoinRoom.bind(this));\n        socket.on(Constants.GET_ROOMS, this.onGetRooms.bind(this));\n\n        socket.on('pointData', this.onGetPointData.bind(this));\n\n        socket.on('gameEvent', this.onGameEvent.bind(this));\n    }\n\n    onCreateRoom (data, fn) {\n        console.log('[CHAT]create room :' + ' ' + JSON.stringify(data));\n        // 如果房间存在，则转去加入\n        if (this._rooms[data.roomId]) {\n            this.onJoinRoom(data, fn);\n            return;\n        }\n        // 校验\n        //roomName:房间名称 id 房间roomId\n        this._socket.join(data.roomId, () => {\n\n            const room = new Room(data.roomId);\n            this._user.roomId = data.roomId;\n            this._user.nickName = data.name;\n            room.join(this._user);\n            try {\n                this._rooms[data.roomId] = room;\n                console.log('@@##this._rooms:' + JSON.stringify(this._rooms))\n                if (!this.game) {\n                    this.game = new Game(this._rooms[this._user.roomId], (event) => {\n                        console.log('@@##onGetPointData:' + JSON.stringify(event));\n                        // this._namespace.to(this._user.roomId).emit('gamePointData', p);\n                        this.sendMessageToRoom(this._user.roomId, event.name, event.data);\n                    });\n                }\n            } catch (err) {\n                console.log('@@##error is ' + err);\n            }\n\n            // Object.assign(this._rooms, { 'fff': room })\n            // console.log('@@##this._rooms 2:' + JSON.stringify(this._rooms))\n\n            this.createRoomCallback(data.roomId);\n            this._socket.emit('joinedRoom', { code: 0, roomId: data.roomId });\n            // 返回房间数\n            this._namespace.emit(Constants.GET_ROOMS, this._rooms);\n\n            fn && fn(data.roomId);\n        });\n    }\n\n    onJoinRoom (data, fn) {\n        console.log('@@##joinRoom:' + JSON.stringify(data));\n        console.log('@@##joinRoom this._rooms :' + JSON.stringify(this._rooms))\n        let curRoom = this._rooms[data.roomId];\n        if (!curRoom) {\n            console.log('@@##joinRoom fail!' + data);\n            this._socket.emit('joinedRoom', { result: '不存在房间号:' + data.roomId, code: -1 });\n            return;\n        } else {\n            if (curRoom.users.length >= 4) {\n                this._socket.emit('joinedRoom', { result: '已满座', code: -1 });\n                return;\n            }\n        }\n\n        // 如果当前用户的ROOMID与传入的一致，说明已在房间了\n        if (this._user.roomId == data.roomId) {\n            console.log('USER IS ALREADY IN ROOM!')\n        } else {\n            if (this._user.roomId) {\n                //如果不一样，则先将之前的退出，删掉，再进入新的\n                this._socket.leave(this._user.roomId, () => {\n                    console.log('@@##' + this._user.nickName + ' leave ' + this._user.roomId);\n                })\n            }\n\n            this._socket.join(data.roomId, () => {\n                console.log('join rooms:' + JSON.stringify(curRoom.id) + ' ' + JSON.stringify(this._rooms));\n                this._user.roomId = data.roomId;\n                this._user.nickName = data.name;\n                curRoom.join(this._user);\n                //   console.log('@@##joined room info :' + JSON.stringify(curRoom.users));\n                this._namespace.to(curRoom.id).emit('serverSendUserChat', {\n                    nick: this._user.nickName,\n                    message: '我在' + data.roomId\n                });\n                this.joinedRoomCallback(data.roomId);\n                this._socket.emit('joinedRoom', { code: 0, roomId: data.roomId });\n                // 返回房间数\n                // 测试发给所有\n                this._namespace.emit(Constants.GET_ROOMS, this._rooms);\n\n                fn && fn(data.roomId);\n            });\n        }\n\n    }\n\n    onGetRooms (data, fn) {\n        fn && fn(this._rooms);\n    }\n\n    receiveMessage (message) {\n        console.log('chat receive message:' + message);\n        // 然后呢 =\n    }\n\n\n\n    // 接收游戏数据\n    onGetPointData (point) {\n        if (!this.game) {\n            this.game = new Game(this._rooms[this._user.roomId], (event) => {\n                // this._namespace.to(this._user.roomId).emit('gamePointData', p);\n                this.sendMessageToRoom(this._user.roomId, event.name, event.data);\n            });\n        }\n        this.game.handleData(point);\n\n    }\n\n    onGameEvent (event) {\n        if (event && event.action) {\n            this.game && this.game.handleGameEvent(event);\n        }\n    }\n\n    onUserChatMessage (message) {\n        console.log('onUserChatMessage:' + message);\n        this._namespace.to(this._user.roomId).emit('serverSendUserChat', {\n            nick: this._user.nickName,\n            message: message + ' from 房间' + this._user.roomId\n        });\n\n\n        // let curRoom = this._rooms[this._user.roomId];\n        // if (curRoom) {\n        //     let users = curRoom.users;\n        //     for (let user of users) {\n        //         this._namespace.to(user.id).emit('serverSendUserChat', {\n        //             nick: user.nickName,\n        //             message: message + 'from' + user.nickName\n        //         });\n        //     }\n        // }\n    }\n\n    sendMessage (socketId, event, message) {\n        //发消息到房间还是给人\n        _socket.broadcast.to(socketId).emit(event, message);\n    }\n\n    sendMessageToRoom (room, event, message) {\n        //发消息到房间还是给人呢\n        this._namespace.to(room).emit(event, message);\n    }\n\n    onDisConnect () {\n        console.log('User ' + this._user.nickName + ' disconneted');\n    }\n\n}"]}