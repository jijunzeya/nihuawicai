{"version":3,"sources":["../../src/handler/ChatHandler.js"],"names":["ChatHandler","nsp","roomId","socket","_namespace","_socket","initSocket","console","log","handshake","query","token","name","on","receiveMessage","bind","sockect","rooms","message","to","emit","nick","_user","nickName","socketId","event","broadcast","room"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IACqBA,W;AAUnB,uBAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAAA;;AAC/B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,UAAL,GAAkBH,GAAlB;AACA,SAAKI,OAAL,GAAeF,MAAf;AACA;AACA;;AAEA,SAAKG,UAAL,CAAgB,KAAKD,OAArB;AACD;;;;+BAEWF,M,EAAQ;AAClBI,cAAQC,GAAR,CAAY,uBAAuBL,OAAOM,SAAP,CAAiBC,KAAjB,CAAuBC,KAA9C,GAAsD,GAAtD,GAA4DR,OAAOM,SAAP,CAAiBC,KAAjB,CAAuBE,IAA/F;AACA;AACA,WAAKP,OAAL,CAAaQ,EAAb,CAAgB,SAAhB,EAA2B,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAA3B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACD;;;8BAEUC,O,EAAS;AAClBT,cAAQC,GAAR,CAAY,2BAA2B,KAAKS,KAAL,CAAW,CAAX,CAA3B,CAAZ;AACD;;AAED;AACA;AACA;;;;mCAEgBC,O,EAAS;AACvBX,cAAQC,GAAR,CAAY,0BAA0BU,OAAtC;AACA;AACD;;;sCAEkBA,O,EAAS;AAC1BX,cAAQC,GAAR,CAAY,uBAAuBU,OAAnC;AACA,UAAI,KAAKhB,MAAT,EAAiB;AACf,aAAKE,UAAL,CAAgBe,EAAhB,CAAmB,KAAKjB,MAAxB,EAAgCkB,IAAhC,CAAqC,oBAArC,EAA2D;AACzDC,gBAAM,KAAKC,KAAL,CAAWC,QADwC;AAEzDL,mBAASA;AAFgD,SAA3D;AAID,OALD,MAKO;AACL,aAAKd,UAAL,CAAgBgB,IAAhB,CAAqB,oBAArB,EAA2C;AACzCC,gBAAM,KAAKC,KAAL,CAAWC,QADwB;AAEzCL,mBAASA;AAFgC,SAA3C;AAID;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;gCAEYM,Q,EAAUC,K,EAAOP,O,EAAS;AACrC;AACA,WAAKb,OAAL,CAAaqB,SAAb,CAAuBP,EAAvB,CAA0BK,QAA1B,EAAoCJ,IAApC,CAAyCK,KAAzC,EAAgDP,OAAhD;AACD;;;sCAEkBS,I,EAAMF,K,EAAOP,O,EAAS;AACvC;AACA,WAAKd,UAAL,CAAgBe,EAAhB,CAAmBQ,IAAnB,EAAyBP,IAAzB,CAA8BK,KAA9B,EAAqCP,OAArC;AACD;;;mCAEe;AACdX,cAAQC,GAAR,CAAY,UAAU,KAAKc,KAAL,CAAWC,QAArB,GAAgC,cAA5C;AACD;;;;;;kBAzFkBvB,W","file":"ChatHandler.js","sourcesContent":["import User from '../beans/User';\nimport Room from '../beans/Room';\nimport Constants from '../common/Constants';\nimport Game from '../game/Game';\nexport default class ChatHandler {\n\n  _socket;\n\n  _user;\n\n  _namespace;\n\n  roomId;\n\n  constructor(nsp, roomId, socket) {\n    this.roomId = roomId;\n    this._namespace = nsp;\n    this._socket = socket;\n    // this.createRoomCallback = cCallback;\n    // this.joinedRoomCallback = jCallback;\n\n    this.initSocket(this._socket);\n  }\n\n  initSocket (socket) {\n    console.log('@@##initSocket @@:' + socket.handshake.query.token + ' ' + socket.handshake.query.name)\n    // this._user = new User(socket.id, socket.handshake.query.name);\n    this._socket.on('message', this.receiveMessage.bind(this));\n    // socket.on('disconnect', this.onDisConnect.bind(this));\n    // socket.on('userChat', this.onUserChatMessage.bind(this));\n    // socket.on('createRoom', this.onCreateRoom.bind(this));\n    // socket.on('joinRoom', this.onJoinRoom.bind(this));\n    // socket.on(Constants.GET_ROOMS, this.onGetRooms.bind(this));\n\n    // socket.on('pointData', this.onGetPointData.bind(this));\n\n    // socket.on('gameEvent', this.onGameEvent.bind(this));\n    // socket.on('connection', this.onConnect.bind(this));\n  }\n\n  onConnect (sockect) {\n    console.log('@@##onConnect:' + (typeof this.rooms[0]));\n  }\n\n  // onGetRooms (data, fn) {\n  // fn && fn(this._rooms);\n  // }\n\n  receiveMessage (message) {\n    console.log('chat receive message:' + message);\n    // 然后呢 =\n  }\n\n  onUserChatMessage (message) {\n    console.log('onUserChatMessage:' + message);\n    if (this.roomId) {\n      this._namespace.to(this.roomId).emit('serverSendUserChat', {\n        nick: this._user.nickName,\n        message: message\n      });\n    } else {\n      this._namespace.emit('serverSendUserChat', {\n        nick: this._user.nickName,\n        message: message\n      });\n    }\n\n\n\n    // let curRoom = this._rooms[this._user.roomId];\n    // if (curRoom) {\n    //     let users = curRoom.users;\n    //     for (let user of users) {\n    //         this._namespace.to(user.id).emit('serverSendUserChat', {\n    //             nick: user.nickName,\n    //             message: message + 'from' + user.nickName\n    //         });\n    //     }\n    // }\n  }\n\n  sendMessage (socketId, event, message) {\n    //发消息到房间还是给人\n    this._socket.broadcast.to(socketId).emit(event, message);\n  }\n\n  sendMessageToRoom (room, event, message) {\n    //发消息到房间还是给人呢\n    this._namespace.to(room).emit(event, message);\n  }\n\n  onDisConnect () {\n    console.log('User ' + this._user.nickName + ' disconneted');\n  }\n\n}"]}