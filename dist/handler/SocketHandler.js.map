{"version":3,"sources":["../../src/handler/SocketHandler.js"],"names":["SocketHandler","server","onConnection","rooms","chatHandlers","io","nsp","of","sockets","on","socket","id","data","socketId","roomId","handshake","query","token","name","listeners","key","fn","callback","join","Error","oldRoomId","newRoomId","room","event","message","to","emit","func"],"mappings":";;;;;;;;AAGA;AACA;;;AAHA;;;;AAIA;;;;;;;;IACqBA,a;AAKnB;;AAEA,yBAAYC,MAAZ,EAAoBC,YAApB,EAAkC;AAAA;;AAAA;;AAAA,SANlCC,KAMkC,GAN1B,EAM0B;AAAA,SALlCC,YAKkC,GALnB,EAKmB;;AAChC,QAAIC,KAAK,qBAAaJ,MAAb,CAAT;AACA,SAAKK,GAAL,GAAWD,GAAGE,EAAH,CAAM,OAAN,CAAX;AACA,SAAKD,GAAL,CAASE,OAAT,GAAmB,EAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAKF,GAAL,CAASG,EAAT,CAAY,YAAZ,EAA0B,kBAAU;;AAElC,YAAKH,GAAL,CAASE,OAAT,CAAiBE,OAAOC,EAAxB,IAA8BD,MAA9B;;AAEA;AACA;AACA,UAAIE,OAAO;AACTC,kBAAUH,OAAOC,EADR;AAETG,gBAAQJ,OAAOK,SAAP,CAAiBC,KAAjB,CAAuBF,MAFtB;AAGTG,eAAOP,OAAOK,SAAP,CAAiBC,KAAjB,CAAuBC,KAHrB;AAITC,cAAMR,OAAOK,SAAP,CAAiBC,KAAjB,CAAuBE;AAJpB,OAAX;AAMAhB,mBAAaU,IAAb;AACD,KAbD;AAcD;;;;kCAEcC,Q,EAAUM,S,EAAW;AAAA;;AAAA,iCACzBC,GADyB;AAEhC,eAAKd,GAAL,CAASE,OAAT,CAAiBK,QAAjB,EAA2BJ,EAA3B,CAA8BW,GAA9B,EAAmC,UAACR,IAAD,EAAOS,EAAP,EAAc;AAC/CF,oBAAUC,GAAV,EAAeR,IAAf,EAAqBS,EAArB,EAAyBR,QAAzB;AACD,SAFD;AAFgC;;AAClC,WAAK,IAAIO,GAAT,IAAgBD,SAAhB,EAA2B;AAAA,cAAlBC,GAAkB;AAI1B;AACF;;;8BAEU,CAEV;;;6BAESP,Q,EAAUC,M,EAAQQ,Q,EAAU;AACpC,UAAI,KAAKhB,GAAL,CAASE,OAAT,CAAiBK,QAAjB,CAAJ,EAAgC;;AAE9B,aAAKP,GAAL,CAASE,OAAT,CAAiBK,QAAjB,EAA2BU,IAA3B,CAAgCT,MAAhC,EAAwCQ,QAAxC;AACD,OAHD,MAGO;AACL,cAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;;AAED;;;;gCACaC,S,EAAWC,S,EAAWJ,Q,EAAU,CAE5C;;;6BAES;AACR,aAAO,KAAKhB,GAAZ;AACD;;;8BAEUO,Q,EAAU;AACnB,aAAO,KAAKP,GAAL,CAASE,OAAT,CAAiBK,QAAjB,CAAP;AACD;;;sCAEkBc,I,EAAMC,K,EAAOC,O,EAAS;AACvC;AACA,WAAKvB,GAAL,CAASwB,EAAT,CAAYH,IAAZ,EAAkBI,IAAlB,CAAuBH,KAAvB,EAA8BC,OAA9B;AACD;;;gCAEYhB,Q,EAAUe,K,EAAOC,O,EAAS;AACrC,WAAKvB,GAAL,CAASE,OAAT,CAAiBK,QAAjB,EAA2BkB,IAA3B,CAAgCH,KAAhC,EAAuCC,OAAvC;AACD;;;yBAEKG,I,EAAM,CAEX;;;;;;kBApFkBhC,a","file":"SocketHandler.js","sourcesContent":["\nimport SocketIO from 'socket.io';\n\n// import User from './beans/User';\n// import Room from './beans/Room';\nimport ChatHandler from './ChatHandler';\nexport default class SocketHandler {\n  rooms = {};\n  chatHandlers = {};\n\n  nsp;\n  // sockets = {};\n\n  constructor(server, onConnection) {\n    let io = new SocketIO(server);\n    this.nsp = io.of('/chat');\n    this.nsp.sockets = {};\n    // middleware\n    // nsp.use((socket, next) => {\n    //   let token = socket.handshake.query.token;\n    //   console.log('@@##nsp middleware:' + token);\n    //   return next();\n    //   // if (isValid(token)) {\n    //   //   return next();\n    //   // }\n    //   // return next(new Error('authentication error'));\n    // });\n\n    // let nsp =io;\n    this.nsp.on('connection', socket => {\n\n      this.nsp.sockets[socket.id] = socket;\n\n      // let roomId = socket.handshake.query.roomId;\n      // let token = sockect.handshake.query.token;\n      let data = {\n        socketId: socket.id,\n        roomId: socket.handshake.query.roomId,\n        token: socket.handshake.query.token,\n        name: socket.handshake.query.name\n      }\n      onConnection(data);\n    });\n  }\n\n  initListeners (socketId, listeners) {\n    for (let key in listeners) {\n      this.nsp.sockets[socketId].on(key, (data, fn) => {\n        listeners[key](data, fn, socketId);\n      });\n    }\n  }\n\n  handler () {\n\n  }\n\n  joinRoom (socketId, roomId, callback) {\n    if (this.nsp.sockets[socketId]) {\n\n      this.nsp.sockets[socketId].join(roomId, callback);\n    } else {\n      throw new Error('socket is not initial');\n    }\n  }\n\n  //改变房间\n  chanageRoom (oldRoomId, newRoomId, callback) {\n\n  }\n\n  getNsp () {\n    return this.nsp;\n  }\n\n  getSocket (socketId) {\n    return this.nsp.sockets[socketId];\n  }\n\n  sendMessageToRoom (room, event, message) {\n    //发消息到房间还是给人呢\n    this.nsp.to(room).emit(event, message);\n  }\n\n  sendMessage (socketId, event, message) {\n    this.nsp.sockets[socketId].emit(event, message);\n  }\n\n  init (func) {\n\n  }\n\n}"]}