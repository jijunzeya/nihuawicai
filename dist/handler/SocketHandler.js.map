{"version":3,"sources":["../../src/handler/SocketHandler.js"],"names":["SocketHandler","server","onConnection","rooms","chatHandlers","io","nsp","of","on","socket","data","roomId","handshake","query","token","name","listeners","key","callback","join","Error","oldRoomId","newRoomId","room","event","message","to","emit","func"],"mappings":";;;;;;;;AAGA;AACA;;;AAHA;;;;AAIA;;;;;;;;IACqBA,a;AAOnB,yBAAYC,MAAZ,EAAoBC,YAApB,EAAkC;AAAA;;AAAA;;AAAA,SANlCC,KAMkC,GAN1B,EAM0B;AAAA,SALlCC,YAKkC,GALnB,EAKmB;;AAChC,QAAIC,KAAK,qBAAaJ,MAAb,CAAT;AACA,SAAKK,GAAL,GAAWD,GAAGE,EAAH,CAAM,OAAN,CAAX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAKD,GAAL,CAASE,EAAT,CAAY,YAAZ,EAA0B,kBAAU;AAClC,YAAKC,MAAL,GAAcA,MAAd;AACA;AACA;AACA,UAAIC,OAAO;AACTC,gBAAQF,OAAOG,SAAP,CAAiBC,KAAjB,CAAuBF,MADtB;AAETG,eAAOL,OAAOG,SAAP,CAAiBC,KAAjB,CAAuBC,KAFrB;AAGTC,cAAMN,OAAOG,SAAP,CAAiBC,KAAjB,CAAuBE;AAHpB,OAAX;AAKAb,mBAAaQ,IAAb;AACD,KAVD;AAYD;;;;kCAEcM,S,EAAW;AACxB,WAAK,IAAIC,GAAT,IAAgBD,SAAhB,EAA2B;AACzB,aAAKP,MAAL,CAAYD,EAAZ,CAAeS,GAAf,EAAoBD,UAAUC,GAAV,CAApB;AACD;AACF;;;6BAESN,M,EAAQO,Q,EAAU;AAC1B,UAAI,KAAKT,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYU,IAAZ,CAAiBR,MAAjB,EAAyBO,QAAzB;AACD,OAFD,MAEO;AACL,cAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;;AAED;;;;gCACaC,S,EAAWC,S,EAAWJ,Q,EAAU,CAE5C;;;6BAES;AACR,aAAO,KAAKZ,GAAZ;AACD;;;gCAEY;AACX,aAAO,KAAKG,MAAZ;AACD;;;sCAEkBc,I,EAAMC,K,EAAOC,O,EAAS;AACvC;AACA,WAAKnB,GAAL,CAASoB,EAAT,CAAYH,IAAZ,EAAkBI,IAAlB,CAAuBH,KAAvB,EAA8BC,OAA9B;AACD;;;gCAEYD,K,EAAOC,O,EAAS;AAC3B,WAAKhB,MAAL,CAAYkB,IAAZ,CAAiBH,KAAjB,EAAwBC,OAAxB;AACD;;;yBAEKG,I,EAAM,CAEX;;;;;;kBA3EkB5B,a","file":"SocketHandler.js","sourcesContent":["\nimport SocketIO from 'socket.io';\n\n// import User from './beans/User';\n// import Room from './beans/Room';\nimport ChatHandler from './ChatHandler';\nexport default class SocketHandler {\n  rooms = {};\n  chatHandlers = {};\n\n  nsp;\n  socket;\n\n  constructor(server, onConnection) {\n    let io = new SocketIO(server);\n    this.nsp = io.of('/chat');\n\n    // middleware\n    // nsp.use((socket, next) => {\n    //   let token = socket.handshake.query.token;\n    //   console.log('@@##nsp middleware:' + token);\n    //   return next();\n    //   // if (isValid(token)) {\n    //   //   return next();\n    //   // }\n    //   // return next(new Error('authentication error'));\n    // });\n\n    // let nsp =io;\n    this.nsp.on('connection', socket => {\n      this.socket = socket;\n      // let roomId = socket.handshake.query.roomId;\n      // let token = sockect.handshake.query.token;\n      let data = {\n        roomId: socket.handshake.query.roomId,\n        token: socket.handshake.query.token,\n        name: socket.handshake.query.name\n      }\n      onConnection(data);\n    });\n\n  }\n\n  initListeners (listeners) {\n    for (let key in listeners) {\n      this.socket.on(key, listeners[key]);\n    }\n  }\n\n  joinRoom (roomId, callback) {\n    if (this.socket) {\n      this.socket.join(roomId, callback);\n    } else {\n      throw new Error('socket is not initial');\n    }\n  }\n\n  //改变房间\n  chanageRoom (oldRoomId, newRoomId, callback) {\n\n  }\n\n  getNsp () {\n    return this.nsp;\n  }\n\n  getSocket () {\n    return this.socket;\n  }\n\n  sendMessageToRoom (room, event, message) {\n    //发消息到房间还是给人呢\n    this.nsp.to(room).emit(event, message);\n  }\n\n  sendMessage (event, message) {\n    this.socket.emit(event, message);\n  }\n\n  init (func) {\n\n  }\n\n}"]}