{"version":3,"sources":["../src/app.bak.js"],"names":["app","server","Server","io","port","process","env","PORT","console","log","__dirname","use","users","nsp","of","roomNO","rooms","on","socket","handshake","query","name","nick","currentUser","id","user","getID","push","emit","length","broadcast","data","JSON","stringify","room","indexOf","to","message","join","code","curRoom","result","listen"],"mappings":"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","file":"app.bak.js","sourcesContent":["import express from \"express\";\nimport http from \"http\";\nimport SocketIO from \"socket.io\";\n\nimport User from \"./beans/User\";\nimport Room from \"./beans/Room\";\n\nlet app = express();\nlet server = http.Server(app);\nlet io = new SocketIO(server);\nlet port = process.env.PORT || 3000;\n\nconsole.log('@@##the dirname is :'+__dirname);\napp.use(express[\"static\"]('./'));\n\nlet users = [];\n// let sockets = {};\n\nlet nsp = io.of(\"/chat\");\nlet roomNO = 0;\n//房间{id:room,id2:room2}\nlet rooms = {};\n// let nsp =io;\nnsp.on(\"connection\", socket => {\n  // let nick = socket.handshake.query.nick;\n  console.log(\"@@##who join :\" + socket.handshake.query.name);\n  let nick = socket.handshake.query.name;\n  let currentUser = {\n    id: socket.id,\n    nick: nick\n  };\n\n  let user = new User(currentUser.id, currentUser.nick);\n  user.socket = socket;\n\n  console.log(\"@@##uuid:\" + user.getID());\n\n  console.log(\"[INFO] User \" + currentUser.nick + \" connected!\");\n  // sockets[currentUser.id] = socket;\n  users.push(currentUser);\n  io.emit(\"userJoin\", { nick: currentUser.nick });\n  console.log(\"[INFO] Total users: \" + users.length);\n\n  socket.on(\"ding\", () => {\n    socket.emit(\"dong\");\n  });\n\n  socket.on(\"disconnect\", () => {\n    console.log(\"[INFO] User \" + currentUser.nick + \" disconnected!\");\n    socket.broadcast.emit(\"userDisconnect\", { nick: currentUser.nick });\n  });\n\n  // 获取分组信息\n  // //获取所有房间（分组）信息\n  // io.sockets.manager.rooms\n  // //来获取此socketid进入的房间信息\n  // io.sockets.manager.roomClients[socket.id]\n  // //获取particular room中的客户端，返回所有在此房间的socket实例\n  // io.sockets.clients('particular room')\n\n  socket.on(\"userChat\", data => {\n    console.log(\n      \"[CHAT]\" + nick + \": \" + data + \" \" + JSON.stringify(socket.rooms)\n    );\n\n    for (let room in socket.rooms) {\n      if (room.indexOf(\"room\") != -1) {\n        console.log(\"@@##soket room :\" + room);\n        nsp.to(room).emit(\"serverSendUserChat\", { nick: nick, message: data });\n      } else {\n      }\n    }\n  });\n\n  //创建房间\n  socket.on(\"createRoom\", data => {\n    console.log(\"[CHAT]create room :\" + data.name);\n    roomNO++;\n    socket.join(\"room\" + roomNO, function() {\n      const room = new Room(roomNO);\n      room.join(user);\n      rooms[\"room\" + roomNO] = room;\n      socket.emit(\"joinedRoom\", { code: 0, roomNO: roomNO });\n    });\n  });\n\n  //加入房间\n  socket.on(\"joinRoom\", data => {\n    console.log(\"@@##[CHAT]join room :\" + JSON.stringify(data));\n    console.log(\"@@##rooms:\" + socket.rooms);\n\n    let curRoom = rooms[\"room\" + data.roomNO];\n    if (!curRoom) {\n      console.log(\"@@##joinRoom fail!\" + data);\n      socket.emit(\"joinedRoom\", { result: \"不存在房间号:\" + data.roomNO, code: -1 });\n      return;\n    } else {\n      if (curRoom.users.length >= 4) {\n        socket.emit(\"joinedRoom\", { result: \"已满座\", code: -1 });\n        return;\n      }\n    }\n    socket.join(\"room\" + data.roomNO, function() {\n      console.log(\"join rooms:\" + JSON.stringify(curRoom.id));\n      curRoom.join(user);\n      //   console.log(\"@@##joined room info :\" + JSON.stringify(curRoom.users));\n      nsp.to(\"room\" + data.roomNO).emit(\"serverSendUserChat\", {\n        nick: nick,\n        message: \"我在\" + data.roomNO\n      });\n      socket.emit(\"joinedRoom\", { code: 0, roomNO: roomNO });\n    });\n  });\n});\n\nserver.listen(port, () => {\n  console.log(\"[INFO] Listening on *:\" + port);\n});\n"]}